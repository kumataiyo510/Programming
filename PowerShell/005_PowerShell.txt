PowerShell

PowerShell実行環境の構築
	Get-ExecutionPolicy
	Set-ExecutionPolicy
		Restricted - 実行できるスクリプトはありません
		Allsigned - 信頼できる発行元が署名したスクリプトのみを実行できます
		RemoteSigned - ダウンロードしたスクリプトは信頼できる発行元が署名した場合にのみ実行できます
		Unrestricted - 制限なし

基本文法
	変数代入
		$hoge = "hogehoge"
		[int]$int = 3
		$bool = $TRUE #or $FALSE
	定数宣言
		set CONSTANT_VALUE "hoge" -option constant    #上書き不可能な定数
	配列・マップ
		$ary = @(100 ,120 ,130)
		$hash = @{ "aaa" = "bbb";"ccc" = $TRUE;}
	文字
		if ("hoge" -like "h*")    #-likeでワイルドカードを使った文字列比較
		if ("fuga" -like "??ge")
		if ("piyo" -match "[a-z]+")    #matchで正規表現を使った文字列比較が可能、それぞれnotlike,notmatchも存在する
	分岐(if)
		$x = "hoge"
		if ($x -eq "hoge") {    #if($true) や if($false) になるもの
		    Write-Output "hoge!!"
		} else {
		    Write-Output "fuge!!"
		}
	分岐(switch)
		switch($x) {
		    "hoge" {
		        Write-Output "hoge-switch"
		    }
		    "fuge" {
		        Write-Output "fuge-switch"
		    }
		    default {
		        Write-Output "other"
		    }
		}
	ループ
		$ary=@(100 ,120 ,300)
		for($i=0; $i -lt 3; $i++) {
		    #break
		    #continue
		    Write-Output $ary[$i]
		}
		
		foreach($dat in $ary) {     #$aryの中身を$datに入れて順次処理する
		    Write-Output ($dat * 2)
		}
		
		$i = 0
		while($i -ne 5) {
		    Write-Output($i)
		    $i++
		}
	コメントアウト
		#一行コメントアウト
		<#
		複数行コメントアウト
		#>
	エスケープシーケンス
		`n 改行
		`t タブ
		`r キャリッジリターン
		`" ダブルクォーテーション
	ヒアドキュメント
		@～@    #＠でダブルクォーテーション、シングルクォーテションを囲むと複数行にわたるヒアドキュメントを記述できる
	プロパティの参照
		$a.fuga
		$a.$("fuga")    #上行と同じ意味
	Param()スクリプトレット
		Param([string] $one, $two)    #コマンドラインから入力された引数を取得できる。引数の型も宣言することもできる
	コマンドの引数の参照
		$Args    #$Args[0] ,$Args[1] ,....    #$args変数が暗黙で定義されておりコマンドラインから渡された引数がすべて格納されている
	関数
		function aaa([int]$i=2) {    #[type]variable=default
		    return("hoge" + $i)
		}
		aaa 3    #関数呼び出し、$args変数を使用すればすべての引数を取得できる
	コマンドレットのエラーハンドリング
		通常エラー
			Get-Content "not exists"    #error発生
			Write-Output    #error後でも実行される
		実行エラー時の動きを指定
			$ErrorActionPreference = "stop"    #$ErrorActionPreferenceという変数に値を設定することでコマンドレット実行時エラーの挙動を指定できる"continue"がデフォルトで2行下は実行されることになる
		エラーオブジェクト
			$error[0]    #$errorという暗黙の変数に、今まで発生した例外の情報が格納されている、最新のエラー情報は0に格納されている
		throw
			try {
				throw "hoge"
			} catch {
				Write-Output $error[0]
			}
			#throw エラー情報で、例外をスローできる
		try-catch
			$ErrorActionPreference = "stop"
			try {
				Get-content "not exists"
			} catch {
				Write-Output "catch"
			}
			Write-Output "hoge"
			#例外をcatchできるようにするためには$ErrorActionPreferenceに"stop"を設定しておく必要がある
		trap
			$ErrorActionPreference = "stop"
			Get-Content "not exists"
			Write-Output "hoge"
			trap {
				Write-Output "trap"
			}
			#エラー発生時にスクリプトの実行が中断されるときに処理を挟むことができる
			#関数内に専用のtrapを定義することも可能
	パイプ処理
		順次処理
			@(1..5) | %{Write-Output $_}
			#%はForEach-Objectのエイリアスである、$_はパイプで受け取ったオブジェクトを参照するための暗黙の変数
		各要素を別の値に変換する
			@(1..3) | %{"<<$_>>"} | % {echo $_}
			#1,2,3が<<1>><<2>><<3>>に変換される
		絞り込み
			@(1..5) | ?{$_ % 2 -eq 0} | %{echo $_}
			#?はWhere-Objectのエイリアスで、条件に一致する要素だけを抽出する
		ソート
			@(1..5) | sort -Descending
		重複を取り除く
			@(4, 2, 1, 2, 4, 5, 3) | sort -Unique
		ソートに使用するプロパティを指定する
			@("one", "two", "three", "four", "five") | sort -Property {$_.Length, $_}
			#-Propertyでソートに使用するプロパティを指定できる、この場合は文字列の長さ、文字列そのものの順でソートしている
		オブジェクトのメンバーを参照する
			@(1..3) | Get-Member
			#オブジェクトのメンバー（メソッドとプロパティ）を参照できる
		自作関数をパイプ処理に対応させる
			function My-Function([Parameter(ValueFromPipeline=$true)] $param) {
				process {
					return $param + 100;
				}
			}
			1..3 | My-Function | ${echo "[$_]"}
			#[101][102][103]が表示される
			#関数内にprocessというブロックを作ると、パイプラインで呼び出されたときに入力ごとに実行される
			#パイプラインに渡されるパラメータは、宣言のところで[Parameter(ValueFromPipeline=$true)]を指定する
			#関数の戻り値が次のパイプに渡される
	ファイル操作
		ファイル作成
			New-Item ファイルパス\ファイル名 -type file -Value abc -Force
			#typeはファイルかディレクトリ、valueはファイルの中身、forceは存在した場合上書きするというオプション
			$content = (Get-Content ファイル名)
			#ファイルの内容を$contentに代入している
		ファイル内容を１行ずつ処理する
			Get-Content sample.txt | %{echo "<li>$_<li>"}
			#<li>content<li>へ処理される
		CSVファイルの読込
			Import-Csv sample.csv
			#１行目はヘッダー行として処理される
			$csv = Import-Csv sample.csv
			echo $csv[1]
			#配列のようにインデックス指定で任意の行にアクセスできる
			Import-Csv sample.csv | ? {$_.AGE -as [int] -gt 18}
			#デフォルトでは各要素は文字列として読み込まれているので-asを使用しキャスト変換している
		CSVファイルの出力
			$array = @(
				@{ID=1; NAME="Sato"; AGE=18},
				@{ID=2; NAME="Suzuki"; AGE=22},
				@{ID=3; NAME="Tanaka"; AGE=19}
			)
			$array | % {New-Object PSobject -Property $_} | Export-Csv out.csv
			#デフォルトではオブジェクトの型情報が１行目に出力される、出力したくない場合は-NoTypeInformationオプションを指定する

PowerShellでエクセルファイルを操作する（基本操作）
	#エクセルを操作するための宣言
	$excel = New-Object -ComObject Excel.Application
	#可視化しない
	$excel.Visible = $False
	#ワークブックを作成
	$book = $excel.Workbooks.Add()
	#既に作成されているワークブックを使用する場合
	$book = $excel.Workbooks.Open("保存先パス\ファイル名")
	#ワークシートを番号で指定し、接続する
	$sheet = $excel.Worksheets.Item(1)
	#指定したセルに文字列を入力
	$sheet.Cells.Item(2,3) = "PowerShellで作成"
	#名前を付けて保存
	$book.SaveAs("C:\保存先パス\ファイル名")
	#Excelを閉じる
	$excel.Quit()
	#プロセスを解放する
	#excel = $null
	[GC]::Collect()


PowerShellクックブック
	1章
		1.1既存ツールの実行
			Program.exe arguments
			ScriptName.ps1 arguments
			BatchFile.cmd arguments
			& 'C:\Program Files\Program\Program.exe' arguments    #実行演算子「&」を文頭につけ、パス内にスペースが存在する場合は「'」で囲う
			#文字列リテラルは、「"」で囲むと変数の展開が行われる
			.\Program.exe arguments    #カレントディレクトリから実行
			& '.\Program With Spaces.exe' arguments
		1.3シェル・プロファイル・プロンプトをカスタマイズする
			PowerShellの外観をカスタマイズした場合、個人プロファイルスクリプト（$profile）に配置します。
			#新しいプロファイルを作成する、すでに存在する場合は上書き保存する
			New-Item -type file -force $profile
			#プロファイルを編集する
			notepad $profile
			#プロファイルを表示する
			Get-childItem $profile
			#エイリアスを設定する
			Set-Alias new New-Object
			Set-Alias iexplore 'C:\Program Files\Internet Explorer\iexplore.exe'
			#プロファイルを再ロードする
			. $profile
		1.4コマンドを見つけてタスクを遂行する
			#特定のコマンドに関するサマリー情報を得るには
			Get-command CommandName
			#特定のコマンドに関する詳細情報を得るには、パイプを使用してFormat-Listコマンドレットへ渡す
			Get-command CommandName | Format-List
			#textを含む名前を持つすべてのコマンドを検索するには
			Get-Command *text*
			#Get動詞を使用するすべてのコマンドを検索するには-Verbパラメータの後にGetを指定します
			Get-Command -Verb Get
			#サービスるに関する処理を行うすべてのコマンドを検索するには-Nounパラメータの後にServiceを指定します
			Get-Command -Noun Service
		1.5コマンドに関するヘルプを取得する
			Get-Help CommandName    #または下記
			CommandName -?
			#詳細表示
			Get-Help CommandName -Detail
			#完全なヘルプ情報の表示
			Get-Help CommandName -Full
			#コマンドの例のみを表示する
			Get-Help CommandName -Examples
			